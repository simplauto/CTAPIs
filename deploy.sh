#!/bin/bash

# =================================================================
# Script de d√©ploiement rapide - API UTAC-OTC
# Pour mettre √† jour une installation existante
# =================================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Variables
APP_DIR="/home/utac-api/utac-api"
SERVICE_NAME="utac-api"
BACKUP_DIR="/home/utac-api/backups"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification que l'installation existe
check_installation() {
    log_info "V√©rification de l'installation existante..."
    
    if [ ! -d "$APP_DIR" ]; then
        log_error "Installation non trouv√©e dans $APP_DIR"
        log_error "Lancez d'abord install.sh pour installer l'application"
        exit 1
    fi
    
    if ! systemctl list-unit-files | grep -q "$SERVICE_NAME.service"; then
        log_error "Service $SERVICE_NAME non trouv√©"
        log_error "Lancez d'abord install.sh pour configurer le service"
        exit 1
    fi
    
    log_success "Installation existante trouv√©e"
}

# Cr√©ation d'une sauvegarde
create_backup() {
    log_info "Cr√©ation d'une sauvegarde..."
    
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="$BACKUP_DIR/utac-api_backup_$TIMESTAMP.tar.gz"
    
    # Cr√©er le r√©pertoire de backup
    sudo -u utac-api mkdir -p "$BACKUP_DIR"
    
    # Arr√™ter le service
    sudo systemctl stop "$SERVICE_NAME"
    
    # Cr√©er la sauvegarde
    sudo -u utac-api tar -czf "$BACKUP_FILE" \
        -C "$(dirname $APP_DIR)" \
        "$(basename $APP_DIR)" \
        --exclude='*/venv/*' \
        --exclude='*/logs/*' \
        --exclude='*/__pycache__/*'
    
    log_success "Sauvegarde cr√©√©e : $BACKUP_FILE"
}

# Mise √† jour des fichiers
update_files() {
    log_info "Mise √† jour des fichiers..."
    
    # V√©rifier que les fichiers sources existent
    CURRENT_DIR=$(pwd)
    
    if [ ! -f "$CURRENT_DIR/api.py" ]; then
        log_error "Fichier api.py non trouv√© dans le r√©pertoire courant"
        exit 1
    fi
    
    if [ ! -f "$CURRENT_DIR/utac_scraper.py" ]; then
        log_error "Fichier utac_scraper.py non trouv√© dans le r√©pertoire courant"
        exit 1
    fi
    
    # Copier les nouveaux fichiers
    sudo -u utac-api cp "$CURRENT_DIR/api.py" "$APP_DIR/"
    sudo -u utac-api cp "$CURRENT_DIR/utac_scraper.py" "$APP_DIR/"
    
    # Mettre √† jour requirements.txt si pr√©sent
    if [ -f "$CURRENT_DIR/requirements.txt" ]; then
        sudo -u utac-api cp "$CURRENT_DIR/requirements.txt" "$APP_DIR/"
        log_info "requirements.txt mis √† jour"
    fi
    
    # Mettre √† jour la configuration Gunicorn si pr√©sente
    if [ -f "$CURRENT_DIR/configs/gunicorn.conf.py" ]; then
        sudo -u utac-api cp "$CURRENT_DIR/configs/gunicorn.conf.py" "$APP_DIR/"
        log_info "gunicorn.conf.py mis √† jour"
    fi
    
    log_success "Fichiers mis √† jour"
}

# Mise √† jour des d√©pendances
update_dependencies() {
    log_info "Mise √† jour des d√©pendances..."
    
    sudo -u utac-api bash << 'EOF'
cd /home/utac-api/utac-api
source venv/bin/activate
pip install --upgrade pip
pip install -r requirements.txt --upgrade
EOF
    
    log_success "D√©pendances mises √† jour"
}

# Test de l'application
test_application() {
    log_info "Test de l'application..."
    
    # D√©marrer le service
    sudo systemctl start "$SERVICE_NAME"
    
    # Attendre que le service d√©marre
    sleep 5
    
    # Tester l'API
    if curl -s -f http://localhost:5000/health > /dev/null; then
        log_success "API fonctionne correctement"
    else
        log_error "API ne r√©pond pas"
        log_info "V√©rification des logs..."
        sudo journalctl -u "$SERVICE_NAME" --no-pager -n 20
        exit 1
    fi
}

# Nettoyage des anciennes sauvegardes
cleanup_backups() {
    log_info "Nettoyage des anciennes sauvegardes..."
    
    # Garder seulement les 5 derni√®res sauvegardes
    sudo -u utac-api bash << 'EOF'
cd /home/utac-api/backups 2>/dev/null || exit 0
ls -t utac-api_backup_*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f
EOF
    
    log_success "Anciennes sauvegardes supprim√©es"
}

# Affichage du statut final
show_status() {
    log_info "=== STATUT FINAL ==="
    
    # Statut du service
    echo "Service status:"
    sudo systemctl status "$SERVICE_NAME" --no-pager -l
    
    echo ""
    
    # Test rapide de l'API
    echo "API Health Check:"
    curl -s http://localhost:5000/health | python3 -m json.tool 2>/dev/null || echo "Erreur lors du test"
    
    echo ""
    log_info "Commandes utiles :"
    echo "  - Logs en temps r√©el : sudo journalctl -u $SERVICE_NAME -f"
    echo "  - Red√©marrer : sudo systemctl restart $SERVICE_NAME"
    echo "  - Monitoring : sudo -u utac-api $APP_DIR/monitor.sh"
    echo "  - Restaurer sauvegarde : tar -xzf /home/utac-api/backups/utac-api_backup_TIMESTAMP.tar.gz -C /"
}

# Fonction principale
main() {
    echo "=================================================="
    echo "  üîÑ D√©ploiement API UTAC-OTC"
    echo "  Mise √† jour d'une installation existante"
    echo "=================================================="
    echo ""
    
    check_installation
    create_backup
    update_files
    update_dependencies
    test_application
    cleanup_backups
    show_status
    
    log_success "D√©ploiement termin√© avec succ√®s !"
}

# Options de ligne de commande
case "${1:-}" in
    --help|-h)
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h     Afficher cette aide"
        echo "  --no-backup    Ne pas cr√©er de sauvegarde"
        echo "  --force        Forcer la mise √† jour m√™me en cas d'erreur"
        echo ""
        echo "Ce script met √† jour une installation existante de l'API UTAC-OTC."
        echo "Il faut lancer ce script depuis le r√©pertoire contenant api.py et utac_scraper.py"
        exit 0
        ;;
    --no-backup)
        log_warning "Mode sans sauvegarde activ√©"
        create_backup() { log_info "Sauvegarde ignor√©e"; }
        shift
        ;;
    --force)
        log_warning "Mode forc√© activ√©"
        set +e  # Continuer en cas d'erreur
        shift
        ;;
esac

# Lancer le d√©ploiement
main "$@"